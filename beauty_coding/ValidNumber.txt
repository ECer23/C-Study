// is_valid_number
#include <string>
 
enum Input {
    INVALID, // 0, 无效输入
    SPACE, // 1, 空格
    SIGN, // 2, 符号
    DIGIT, // 3, 数字
    DOT, // 4, 小数点
    EXPONENT // 5, 指数
};
enum State {
    START, // 0,开始状态，可输入空格、数字、符号、小数点。
    SIGNS, // 1,输入一个符号后的状态。
    DOTFIRST, // 2,小数点前无数字
    DIGITS, // 3, 输入数字
    DOTS, // 4, 小数点后数字
    EXP, // 5, 指数输入
    EXPDIGIT, // 6, 指数
    EXPSIGN, // 7, 指数符号
    END // 8, 后面的多余空格
};
bool isNumber(std::string s) {
    int transTable[][6] = {
        -1,  0,  1, 3,  2, -1,
        -1, -1, -1, 3,  2, -1,
        -1, -1, -1, 4, -1, -1,
        -1,  8, -1, 3,  4,  5,
        -1,  8, -1, 4, -1,  5,
        -1, -1,  7, 6, -1, -1,
        -1,  8, -1, 6, -1, -1,
        -1, -1, -1, 6, -1, -1,
        -1,  8, -1,-1, -1, -1
    };
    int state = 0;
    Input input = INVALID;
    int length = s.length();
    for (int i = 0; i < length; i++) {
        char temp = s[i];
        if (temp == ' ') {
            input = SPACE;
        } else if (temp == '+' || temp == '-') {
            input = SIGN;
        } else if (temp >='0' && temp <='9') {
            input = DIGIT;
        }else if (temp == '.') {
            input = DOT;
        } else if (temp == 'e' || temp == 'E') {
            input = EXPONENT;
        } else if (temp == '+' || temp == '-') {
            input = SIGN;
        } else {
            input = INVALID;
        }
        state = transTable[state][input];
        if (state == -1) {
            return false;
        }
    }
    return state == 3 || state == 4 || state == 6 || state == 8;
}

/*
#include <string>
using namespace std;

bool isNumber(string str) {
  int end = str.size();
  int beg = 0;
  int flag = 0;
  if (str[str.size() - 1] == ' ') {
    while (str[end - 1] == ' ') {
      end--;
    }
  }
  if (str[beg] == ' ') {
    while (str[beg] == ' ') {
      beg++;
    }
  }
  if (str[beg] < '0' || str[beg] > '9') {
    if (str[beg] != '.' && str[beg] != '+' && str[beg] != '-')
      return (false);
  }
  if (str[end - 1] < '0' || str[end - 1] > '9') {
    return (false);
  }
  for (int i = beg; i < end; i++) {
    if (str[i] == ' ') {
      return (false);
    } else if ((str[i] == 'e' || str[i] == 'E')) {
      // 不可出现两次
      if (flag == 1) 
        return (false);
      flag = 1;
      // e不能在头尾
      if (i == 0 || i == end - 1)
        return (false);
      if (i > beg + 1) {
        if (str[i-1] == '.' && (str[i-2] == '+' || str[i-2] == '-'))
          return (false);
      }
      // 后面可以跟+-
      if (str[i + 1] == '+' || str[i + 1] == '-') {
        if (i > beg && (str[i-1] == '+' || str[i-1] == '-' || str[i-1] == '.'))
          return (false);
        i++;
      }
      continue;
    // 不能有多次+-
      } else if (i != beg && (str[i] == '+' || str[i] == '-')) {
      return (false);
    }
  }
  return (true);
}
*/